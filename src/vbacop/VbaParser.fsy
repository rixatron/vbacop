%{ open System
open Statements
open Microsoft.FSharp.Collections
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers

let log s = System.Diagnostics.Debug.WriteLine (sprintf "%A" s)

let option_xor a b = List.reduce (fun x y -> match x with | Some _ -> x | None -> y) [a;b] 

let getArrayDecl(l,u) =
    match l,u with
      | Some a, None -> { UpperBound = a; LowerBound=None }
      | Some a, Some b -> { LowerBound = Some a; UpperBound=b }

let matchFirst i =
    match i with 
      | Some x, _ -> x 
      | _ -> None; 

%}

%start start
%type <Statements.Prog> start
%token <string> ID
%token <string> TYPE
%token <System.Int32> DIGIT 
%token <Statements.IntValue> INT
%token <Statements.FloatValue> FLOAT
%token <System.DateTime> DATETIME 
%token <string> STRING DEFK DEFRANGE
%token <string * string> TYPEDID
%token EOS

%token CALL CASE CLOSE CONST DECLARE DEFBOOL DEFBYTE DEFCUR DEFDATE DEFDBL DEFINT DEFLNG DEFLNGLG DEFLNGPTR DEFOBJ DEFSNG DEFSTR DEFVAR DIM DO ELSE ELSEIF END ENDIF ENUM ERASE EVENT EXIT FOR FRIEND FUNCTION GET GLOBAL GOSUB GOTO IF IMPLEMENTS INPUT LET LOCK LOOP LSET NEXT ON OPEN OPTION PRINT PRIVATE PUBLIC PUT RAISEEVENT REDIM RESUME RETURN RSET SEEK SELECT SET STATIC STOP SUB UNLOCK WEND WHILE WITH WRITE REM ANY AS BYREF BYVAL EACH IN SHARED UNTIL WITHEVENTS OPTIONAL PARAMARRAY PRESERVE SPC TAB THEN TO ADDRESSOF AND EQV IMP IS LIKE NEW MOD NOT OR TYPEOF XOR EXPLICIT COMPARE BINARY TEXT BASE PRIVATEMODULE EOF LPAREN RPAREN COMMA ENDSUB EQUALS
%% 

start: Prog                 { $1 }
 
Prog: moduleStmtList subProcedureList  { {  Statements = (List.rev($1)); SubProcedures=(List.rev($2)) } }

Stmt: 
  | DIM Id AS Type EOS { log "declaration"; Declaration($2,$4) }

moduleStatement:
  | OPTION optionClause EOS { $2 }
  | globalVariableDeclaration EOS { $1 }
  | privateVariableDeclaration EOS { $1 }
  | publicVariableDeclaration EOS { $1 }

globalVariableDeclaration:
  | GLOBAL moduleVariableDeclarationList { ModuleDeclarationList({ Scope=GlobalModuleScope; Shared=false; Declarations=(List.rev $2) }) }

publicVariableDeclaration:
  | PUBLIC optionalShared moduleVariableDeclarationList { ModuleDeclarationList({ Scope=PublicModuleScope; Shared=$2; Declarations=(List.rev $3) }) }

privateVariableDeclaration:
  | privateVariableDeclarationStart optionalShared moduleVariableDeclarationList  { ModuleDeclarationList({ Scope=$1; Shared=$2; Declarations=(List.rev $3) }) }

privateVariableDeclarationStart:
  | PRIVATE { PrivateModuleScope }
  | DIM     { PrivateModuleScope }

moduleVariableDeclarationList:
  | withEventsVariableDcl { [{ Declaration=$1; WithEvents=true }] } 
  | variableDcl { [{ Declaration=$1; WithEvents=false }] }
  | moduleVariableDeclarationList COMMA variableDcl { { Declaration=$3; WithEvents=false } :: $1 }
  | moduleVariableDeclarationList COMMA withEventsVariableDcl { { Declaration=$3; WithEvents=false } :: $1 } 

withEventsVariableDcl: 
  | WITHEVENTS variableDcl { $2 }

variableDcl:
  | typedVariableDcl   { $1 }
  | untypedVariableDcl { $1 }

untypedVariableDcl:
  | ID { NormalVariableDeclaration({ Name = UntypedName($1); Type = None }) }
  | ID asClause { NormalVariableDeclaration({ Name = UntypedName($1); Type = Some $2 }) }
  | ID arrayClause { ArrayVariableDeclaration({ Name = UntypedName($1); Array= $2; }) }

typedVariableDcl:
  | TYPEDID { NormalVariableDeclaration({ Name=TypedName(fst $1, snd $1); Type=None }) }
  | TYPEDID arrayClause { ArrayVariableDeclaration({ Name=TypedName(fst $1, snd $1); Array=$2 }) }

arrayClause:
    | arrayDim { $1 None }
    | arrayDim asClause { $1 (Some $2) }
//  | arrayDim { match $1 with | Some x -> StaticArrayDeclaration((List.map getArrayDecl x), None) | None -> DynamicArrayDeclaration(None) }
//  | arrayDim asClause {match $1 with | Some x -> StaticArrayDeclaration((List.map getArrayDecl x), (Some $2)) | None -> DynamicArrayDeclaration(Some $1) }

asClause:
  | AS NEW ID { AutoType($3) }
  | AS TYPE { Type($2) }

arrayDim:
    | LPAREN RPAREN { fun t -> DynamicArrayDeclaration(t) }
    | LPAREN boundsList RPAREN { fun t -> StaticArrayDeclaration((List.map getArrayDecl $2), t) }
//  | LPAREN RPAREN { None : (int option * int option) list option }
//  | LPAREN boundsList RPAREN { Some $1 }

boundsList:
  | dimSpec  { [$1] }
  | boundsList COMMA dimSpec { $3 :: $1 }

dimSpec:
  | INT TO INT { Some $1.Value, Some $3.Value }
  | INT { Some $1.Value, None }

optionalShared:
  |         { false }
  | SHARED  { true  }

moduleStmtList:
  | {[]}
  | moduleStatement { [$1] }
  | moduleStmtList moduleStatement { $2 :: $1 }

StmtList: 
  | {[]}
  | Stmt { [$1] }
  | StmtList Stmt       { $2 :: $1 } 

optionClause: 
  | EXPLICIT                    { Option(Explicit) }
  | PRIVATEMODULE               { Option(PrivateModule) }
  | COMPARE compareType         { Option($2) }
  | BASE INT                    { Option(Base($2.Value)) }

compareType:
  | BINARY                      { CompareOption(Binary) }
  | TEXT                        { CompareOption(Text) }

defType:
  | DEFK DEFRANGE               { DefRange($1,$2) }

subProcedureList:
  | {[]}
  | subProcedure { [$1] }
  | subProcedureList subProcedure { $2 :: $1 }

subProcedure: 
  | subDeclaration EOS StmtList ENDSUB EOS { log "subProc"; { Declaration = $1; Statements = $3 } }

subDeclaration: 
  | procedureScope procedureStatic SUB ID LPAREN procedureParameters RPAREN procedureStatic { { Scope=$1; Static=(option_xor $2 $8); Name=$4; Parameters = List.rev($6) } } 

procedureParameters:
  | positionalParam                             { [$1] }
  | procedureParameters COMMA positionalParam   { $3 :: $1 }

positionalParam:
  | parameterMechanic ID parameterType { { Mechanic = $1; IsArray=fst($3); IsOptional=false; Type=snd($3); Name=$2 } }

parameterType: parameterArrayDesignator AS TYPE { $1, Type($3) }

parameterArrayDesignator:
  |                             { false }
  | LPAREN RPAREN               { true  }

parameterMechanic:
  |                             { None }
  | BYVAL                       { Some(ByVal) }
  | BYREF                       { Some(ByRef) }

procedureStatic:
  |                             { None }
  | STATIC                      { Some(Static) }

procedureScope:
  |                             { None }
  | GLOBAL                      { Some(GlobalProcedureScope)}
  | PUBLIC                      { Some(PublicProcedureScope)}
  | PRIVATE                     { Some(PrivateProcedureScope)}
  | FRIEND                      { Some(FriendProcedureScope)}

Id:
	| ID { $1 }
Type:
	| TYPE { $1 }

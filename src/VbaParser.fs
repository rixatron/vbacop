// Implementation file for parser generated by fsyacc
module VbaParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "/home/rix/dev/vbacop/src/VbaParser.fsy"
 open System
open Statements
open Microsoft.FSharp.Collections
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers

let log s = System.Diagnostics.Debug.WriteLine (sprintf "%A" s)

let option_xor a b = List.reduce (fun x y -> match x with | Some _ -> x | None -> y) [a;b] 

# 17 "/home/rix/dev/vbacop/src/VbaParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | CALL
  | CASE
  | CLOSE
  | CONST
  | DECLARE
  | DEFBOOL
  | DEFBYTE
  | DEFCUR
  | DEFDATE
  | DEFDBL
  | DEFINT
  | DEFLNG
  | DEFLNGLG
  | DEFLNGPTR
  | DEFOBJ
  | DEFSNG
  | DEFSTR
  | DEFVAR
  | DIM
  | DO
  | ELSE
  | ELSEIF
  | END
  | ENDIF
  | ENUM
  | ERASE
  | EVENT
  | EXIT
  | FOR
  | FRIEND
  | FUNCTION
  | GET
  | GLOBAL
  | GOSUB
  | GOTO
  | IF
  | IMPLEMENTS
  | INPUT
  | LET
  | LOCK
  | LOOP
  | LSET
  | NEXT
  | ON
  | OPEN
  | OPTION
  | PRINT
  | PRIVATE
  | PUBLIC
  | PUT
  | RAISEEVENT
  | REDIM
  | RESUME
  | RETURN
  | RSET
  | SEEK
  | SELECT
  | SET
  | STATIC
  | STOP
  | SUB
  | UNLOCK
  | WEND
  | WHILE
  | WITH
  | WRITE
  | REM
  | ANY
  | AS
  | BYREF
  | BYVAL
  | EACH
  | IN
  | SHARED
  | UNTIL
  | WITHEVENTS
  | OPTIONAL
  | PARAMARRAY
  | PRESERVE
  | SPC
  | TAB
  | THEN
  | TO
  | ADDRESSOF
  | AND
  | EQV
  | IMP
  | IS
  | LIKE
  | NEW
  | MOD
  | NOT
  | OR
  | TYPEOF
  | XOR
  | EXPLICIT
  | COMPARE
  | BINARY
  | TEXT
  | BASE
  | PRIVATEMODULE
  | EOF
  | LPAREN
  | RPAREN
  | COMMA
  | ENDSUB
  | EOS
  | DIGIT of (System.Int32)
  | INT of (System.Int32)
  | TYPE of (string)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_CALL
    | TOKEN_CASE
    | TOKEN_CLOSE
    | TOKEN_CONST
    | TOKEN_DECLARE
    | TOKEN_DEFBOOL
    | TOKEN_DEFBYTE
    | TOKEN_DEFCUR
    | TOKEN_DEFDATE
    | TOKEN_DEFDBL
    | TOKEN_DEFINT
    | TOKEN_DEFLNG
    | TOKEN_DEFLNGLG
    | TOKEN_DEFLNGPTR
    | TOKEN_DEFOBJ
    | TOKEN_DEFSNG
    | TOKEN_DEFSTR
    | TOKEN_DEFVAR
    | TOKEN_DIM
    | TOKEN_DO
    | TOKEN_ELSE
    | TOKEN_ELSEIF
    | TOKEN_END
    | TOKEN_ENDIF
    | TOKEN_ENUM
    | TOKEN_ERASE
    | TOKEN_EVENT
    | TOKEN_EXIT
    | TOKEN_FOR
    | TOKEN_FRIEND
    | TOKEN_FUNCTION
    | TOKEN_GET
    | TOKEN_GLOBAL
    | TOKEN_GOSUB
    | TOKEN_GOTO
    | TOKEN_IF
    | TOKEN_IMPLEMENTS
    | TOKEN_INPUT
    | TOKEN_LET
    | TOKEN_LOCK
    | TOKEN_LOOP
    | TOKEN_LSET
    | TOKEN_NEXT
    | TOKEN_ON
    | TOKEN_OPEN
    | TOKEN_OPTION
    | TOKEN_PRINT
    | TOKEN_PRIVATE
    | TOKEN_PUBLIC
    | TOKEN_PUT
    | TOKEN_RAISEEVENT
    | TOKEN_REDIM
    | TOKEN_RESUME
    | TOKEN_RETURN
    | TOKEN_RSET
    | TOKEN_SEEK
    | TOKEN_SELECT
    | TOKEN_SET
    | TOKEN_STATIC
    | TOKEN_STOP
    | TOKEN_SUB
    | TOKEN_UNLOCK
    | TOKEN_WEND
    | TOKEN_WHILE
    | TOKEN_WITH
    | TOKEN_WRITE
    | TOKEN_REM
    | TOKEN_ANY
    | TOKEN_AS
    | TOKEN_BYREF
    | TOKEN_BYVAL
    | TOKEN_EACH
    | TOKEN_IN
    | TOKEN_SHARED
    | TOKEN_UNTIL
    | TOKEN_WITHEVENTS
    | TOKEN_OPTIONAL
    | TOKEN_PARAMARRAY
    | TOKEN_PRESERVE
    | TOKEN_SPC
    | TOKEN_TAB
    | TOKEN_THEN
    | TOKEN_TO
    | TOKEN_ADDRESSOF
    | TOKEN_AND
    | TOKEN_EQV
    | TOKEN_IMP
    | TOKEN_IS
    | TOKEN_LIKE
    | TOKEN_NEW
    | TOKEN_MOD
    | TOKEN_NOT
    | TOKEN_OR
    | TOKEN_TYPEOF
    | TOKEN_XOR
    | TOKEN_EXPLICIT
    | TOKEN_COMPARE
    | TOKEN_BINARY
    | TOKEN_TEXT
    | TOKEN_BASE
    | TOKEN_PRIVATEMODULE
    | TOKEN_EOF
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_COMMA
    | TOKEN_ENDSUB
    | TOKEN_EOS
    | TOKEN_DIGIT
    | TOKEN_INT
    | TOKEN_TYPE
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Prog
    | NONTERM_Stmt
    | NONTERM_StmtList
    | NONTERM_optionClause
    | NONTERM_compareType
    | NONTERM_subProcedureList
    | NONTERM_subProcedure
    | NONTERM_subDeclaration
    | NONTERM_procedureParameters
    | NONTERM_positionalParam
    | NONTERM_parameterType
    | NONTERM_parameterArrayDesignator
    | NONTERM_parameterMechanic
    | NONTERM_procedureStatic
    | NONTERM_procedureScope
    | NONTERM_Id
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | CALL  -> 0 
  | CASE  -> 1 
  | CLOSE  -> 2 
  | CONST  -> 3 
  | DECLARE  -> 4 
  | DEFBOOL  -> 5 
  | DEFBYTE  -> 6 
  | DEFCUR  -> 7 
  | DEFDATE  -> 8 
  | DEFDBL  -> 9 
  | DEFINT  -> 10 
  | DEFLNG  -> 11 
  | DEFLNGLG  -> 12 
  | DEFLNGPTR  -> 13 
  | DEFOBJ  -> 14 
  | DEFSNG  -> 15 
  | DEFSTR  -> 16 
  | DEFVAR  -> 17 
  | DIM  -> 18 
  | DO  -> 19 
  | ELSE  -> 20 
  | ELSEIF  -> 21 
  | END  -> 22 
  | ENDIF  -> 23 
  | ENUM  -> 24 
  | ERASE  -> 25 
  | EVENT  -> 26 
  | EXIT  -> 27 
  | FOR  -> 28 
  | FRIEND  -> 29 
  | FUNCTION  -> 30 
  | GET  -> 31 
  | GLOBAL  -> 32 
  | GOSUB  -> 33 
  | GOTO  -> 34 
  | IF  -> 35 
  | IMPLEMENTS  -> 36 
  | INPUT  -> 37 
  | LET  -> 38 
  | LOCK  -> 39 
  | LOOP  -> 40 
  | LSET  -> 41 
  | NEXT  -> 42 
  | ON  -> 43 
  | OPEN  -> 44 
  | OPTION  -> 45 
  | PRINT  -> 46 
  | PRIVATE  -> 47 
  | PUBLIC  -> 48 
  | PUT  -> 49 
  | RAISEEVENT  -> 50 
  | REDIM  -> 51 
  | RESUME  -> 52 
  | RETURN  -> 53 
  | RSET  -> 54 
  | SEEK  -> 55 
  | SELECT  -> 56 
  | SET  -> 57 
  | STATIC  -> 58 
  | STOP  -> 59 
  | SUB  -> 60 
  | UNLOCK  -> 61 
  | WEND  -> 62 
  | WHILE  -> 63 
  | WITH  -> 64 
  | WRITE  -> 65 
  | REM  -> 66 
  | ANY  -> 67 
  | AS  -> 68 
  | BYREF  -> 69 
  | BYVAL  -> 70 
  | EACH  -> 71 
  | IN  -> 72 
  | SHARED  -> 73 
  | UNTIL  -> 74 
  | WITHEVENTS  -> 75 
  | OPTIONAL  -> 76 
  | PARAMARRAY  -> 77 
  | PRESERVE  -> 78 
  | SPC  -> 79 
  | TAB  -> 80 
  | THEN  -> 81 
  | TO  -> 82 
  | ADDRESSOF  -> 83 
  | AND  -> 84 
  | EQV  -> 85 
  | IMP  -> 86 
  | IS  -> 87 
  | LIKE  -> 88 
  | NEW  -> 89 
  | MOD  -> 90 
  | NOT  -> 91 
  | OR  -> 92 
  | TYPEOF  -> 93 
  | XOR  -> 94 
  | EXPLICIT  -> 95 
  | COMPARE  -> 96 
  | BINARY  -> 97 
  | TEXT  -> 98 
  | BASE  -> 99 
  | PRIVATEMODULE  -> 100 
  | EOF  -> 101 
  | LPAREN  -> 102 
  | RPAREN  -> 103 
  | COMMA  -> 104 
  | ENDSUB  -> 105 
  | EOS  -> 106 
  | DIGIT _ -> 107 
  | INT _ -> 108 
  | TYPE _ -> 109 
  | ID _ -> 110 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_CALL 
  | 1 -> TOKEN_CASE 
  | 2 -> TOKEN_CLOSE 
  | 3 -> TOKEN_CONST 
  | 4 -> TOKEN_DECLARE 
  | 5 -> TOKEN_DEFBOOL 
  | 6 -> TOKEN_DEFBYTE 
  | 7 -> TOKEN_DEFCUR 
  | 8 -> TOKEN_DEFDATE 
  | 9 -> TOKEN_DEFDBL 
  | 10 -> TOKEN_DEFINT 
  | 11 -> TOKEN_DEFLNG 
  | 12 -> TOKEN_DEFLNGLG 
  | 13 -> TOKEN_DEFLNGPTR 
  | 14 -> TOKEN_DEFOBJ 
  | 15 -> TOKEN_DEFSNG 
  | 16 -> TOKEN_DEFSTR 
  | 17 -> TOKEN_DEFVAR 
  | 18 -> TOKEN_DIM 
  | 19 -> TOKEN_DO 
  | 20 -> TOKEN_ELSE 
  | 21 -> TOKEN_ELSEIF 
  | 22 -> TOKEN_END 
  | 23 -> TOKEN_ENDIF 
  | 24 -> TOKEN_ENUM 
  | 25 -> TOKEN_ERASE 
  | 26 -> TOKEN_EVENT 
  | 27 -> TOKEN_EXIT 
  | 28 -> TOKEN_FOR 
  | 29 -> TOKEN_FRIEND 
  | 30 -> TOKEN_FUNCTION 
  | 31 -> TOKEN_GET 
  | 32 -> TOKEN_GLOBAL 
  | 33 -> TOKEN_GOSUB 
  | 34 -> TOKEN_GOTO 
  | 35 -> TOKEN_IF 
  | 36 -> TOKEN_IMPLEMENTS 
  | 37 -> TOKEN_INPUT 
  | 38 -> TOKEN_LET 
  | 39 -> TOKEN_LOCK 
  | 40 -> TOKEN_LOOP 
  | 41 -> TOKEN_LSET 
  | 42 -> TOKEN_NEXT 
  | 43 -> TOKEN_ON 
  | 44 -> TOKEN_OPEN 
  | 45 -> TOKEN_OPTION 
  | 46 -> TOKEN_PRINT 
  | 47 -> TOKEN_PRIVATE 
  | 48 -> TOKEN_PUBLIC 
  | 49 -> TOKEN_PUT 
  | 50 -> TOKEN_RAISEEVENT 
  | 51 -> TOKEN_REDIM 
  | 52 -> TOKEN_RESUME 
  | 53 -> TOKEN_RETURN 
  | 54 -> TOKEN_RSET 
  | 55 -> TOKEN_SEEK 
  | 56 -> TOKEN_SELECT 
  | 57 -> TOKEN_SET 
  | 58 -> TOKEN_STATIC 
  | 59 -> TOKEN_STOP 
  | 60 -> TOKEN_SUB 
  | 61 -> TOKEN_UNLOCK 
  | 62 -> TOKEN_WEND 
  | 63 -> TOKEN_WHILE 
  | 64 -> TOKEN_WITH 
  | 65 -> TOKEN_WRITE 
  | 66 -> TOKEN_REM 
  | 67 -> TOKEN_ANY 
  | 68 -> TOKEN_AS 
  | 69 -> TOKEN_BYREF 
  | 70 -> TOKEN_BYVAL 
  | 71 -> TOKEN_EACH 
  | 72 -> TOKEN_IN 
  | 73 -> TOKEN_SHARED 
  | 74 -> TOKEN_UNTIL 
  | 75 -> TOKEN_WITHEVENTS 
  | 76 -> TOKEN_OPTIONAL 
  | 77 -> TOKEN_PARAMARRAY 
  | 78 -> TOKEN_PRESERVE 
  | 79 -> TOKEN_SPC 
  | 80 -> TOKEN_TAB 
  | 81 -> TOKEN_THEN 
  | 82 -> TOKEN_TO 
  | 83 -> TOKEN_ADDRESSOF 
  | 84 -> TOKEN_AND 
  | 85 -> TOKEN_EQV 
  | 86 -> TOKEN_IMP 
  | 87 -> TOKEN_IS 
  | 88 -> TOKEN_LIKE 
  | 89 -> TOKEN_NEW 
  | 90 -> TOKEN_MOD 
  | 91 -> TOKEN_NOT 
  | 92 -> TOKEN_OR 
  | 93 -> TOKEN_TYPEOF 
  | 94 -> TOKEN_XOR 
  | 95 -> TOKEN_EXPLICIT 
  | 96 -> TOKEN_COMPARE 
  | 97 -> TOKEN_BINARY 
  | 98 -> TOKEN_TEXT 
  | 99 -> TOKEN_BASE 
  | 100 -> TOKEN_PRIVATEMODULE 
  | 101 -> TOKEN_EOF 
  | 102 -> TOKEN_LPAREN 
  | 103 -> TOKEN_RPAREN 
  | 104 -> TOKEN_COMMA 
  | 105 -> TOKEN_ENDSUB 
  | 106 -> TOKEN_EOS 
  | 107 -> TOKEN_DIGIT 
  | 108 -> TOKEN_INT 
  | 109 -> TOKEN_TYPE 
  | 110 -> TOKEN_ID 
  | 113 -> TOKEN_end_of_input
  | 111 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Prog 
    | 3 -> NONTERM_Stmt 
    | 4 -> NONTERM_Stmt 
    | 5 -> NONTERM_StmtList 
    | 6 -> NONTERM_StmtList 
    | 7 -> NONTERM_StmtList 
    | 8 -> NONTERM_optionClause 
    | 9 -> NONTERM_optionClause 
    | 10 -> NONTERM_optionClause 
    | 11 -> NONTERM_optionClause 
    | 12 -> NONTERM_compareType 
    | 13 -> NONTERM_compareType 
    | 14 -> NONTERM_subProcedureList 
    | 15 -> NONTERM_subProcedureList 
    | 16 -> NONTERM_subProcedureList 
    | 17 -> NONTERM_subProcedure 
    | 18 -> NONTERM_subDeclaration 
    | 19 -> NONTERM_procedureParameters 
    | 20 -> NONTERM_procedureParameters 
    | 21 -> NONTERM_positionalParam 
    | 22 -> NONTERM_parameterType 
    | 23 -> NONTERM_parameterArrayDesignator 
    | 24 -> NONTERM_parameterArrayDesignator 
    | 25 -> NONTERM_parameterMechanic 
    | 26 -> NONTERM_parameterMechanic 
    | 27 -> NONTERM_parameterMechanic 
    | 28 -> NONTERM_procedureStatic 
    | 29 -> NONTERM_procedureStatic 
    | 30 -> NONTERM_procedureScope 
    | 31 -> NONTERM_procedureScope 
    | 32 -> NONTERM_procedureScope 
    | 33 -> NONTERM_procedureScope 
    | 34 -> NONTERM_procedureScope 
    | 35 -> NONTERM_Id 
    | 36 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 113 
let _fsyacc_tagOfErrorTerminal = 111

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | CALL  -> "CALL" 
  | CASE  -> "CASE" 
  | CLOSE  -> "CLOSE" 
  | CONST  -> "CONST" 
  | DECLARE  -> "DECLARE" 
  | DEFBOOL  -> "DEFBOOL" 
  | DEFBYTE  -> "DEFBYTE" 
  | DEFCUR  -> "DEFCUR" 
  | DEFDATE  -> "DEFDATE" 
  | DEFDBL  -> "DEFDBL" 
  | DEFINT  -> "DEFINT" 
  | DEFLNG  -> "DEFLNG" 
  | DEFLNGLG  -> "DEFLNGLG" 
  | DEFLNGPTR  -> "DEFLNGPTR" 
  | DEFOBJ  -> "DEFOBJ" 
  | DEFSNG  -> "DEFSNG" 
  | DEFSTR  -> "DEFSTR" 
  | DEFVAR  -> "DEFVAR" 
  | DIM  -> "DIM" 
  | DO  -> "DO" 
  | ELSE  -> "ELSE" 
  | ELSEIF  -> "ELSEIF" 
  | END  -> "END" 
  | ENDIF  -> "ENDIF" 
  | ENUM  -> "ENUM" 
  | ERASE  -> "ERASE" 
  | EVENT  -> "EVENT" 
  | EXIT  -> "EXIT" 
  | FOR  -> "FOR" 
  | FRIEND  -> "FRIEND" 
  | FUNCTION  -> "FUNCTION" 
  | GET  -> "GET" 
  | GLOBAL  -> "GLOBAL" 
  | GOSUB  -> "GOSUB" 
  | GOTO  -> "GOTO" 
  | IF  -> "IF" 
  | IMPLEMENTS  -> "IMPLEMENTS" 
  | INPUT  -> "INPUT" 
  | LET  -> "LET" 
  | LOCK  -> "LOCK" 
  | LOOP  -> "LOOP" 
  | LSET  -> "LSET" 
  | NEXT  -> "NEXT" 
  | ON  -> "ON" 
  | OPEN  -> "OPEN" 
  | OPTION  -> "OPTION" 
  | PRINT  -> "PRINT" 
  | PRIVATE  -> "PRIVATE" 
  | PUBLIC  -> "PUBLIC" 
  | PUT  -> "PUT" 
  | RAISEEVENT  -> "RAISEEVENT" 
  | REDIM  -> "REDIM" 
  | RESUME  -> "RESUME" 
  | RETURN  -> "RETURN" 
  | RSET  -> "RSET" 
  | SEEK  -> "SEEK" 
  | SELECT  -> "SELECT" 
  | SET  -> "SET" 
  | STATIC  -> "STATIC" 
  | STOP  -> "STOP" 
  | SUB  -> "SUB" 
  | UNLOCK  -> "UNLOCK" 
  | WEND  -> "WEND" 
  | WHILE  -> "WHILE" 
  | WITH  -> "WITH" 
  | WRITE  -> "WRITE" 
  | REM  -> "REM" 
  | ANY  -> "ANY" 
  | AS  -> "AS" 
  | BYREF  -> "BYREF" 
  | BYVAL  -> "BYVAL" 
  | EACH  -> "EACH" 
  | IN  -> "IN" 
  | SHARED  -> "SHARED" 
  | UNTIL  -> "UNTIL" 
  | WITHEVENTS  -> "WITHEVENTS" 
  | OPTIONAL  -> "OPTIONAL" 
  | PARAMARRAY  -> "PARAMARRAY" 
  | PRESERVE  -> "PRESERVE" 
  | SPC  -> "SPC" 
  | TAB  -> "TAB" 
  | THEN  -> "THEN" 
  | TO  -> "TO" 
  | ADDRESSOF  -> "ADDRESSOF" 
  | AND  -> "AND" 
  | EQV  -> "EQV" 
  | IMP  -> "IMP" 
  | IS  -> "IS" 
  | LIKE  -> "LIKE" 
  | NEW  -> "NEW" 
  | MOD  -> "MOD" 
  | NOT  -> "NOT" 
  | OR  -> "OR" 
  | TYPEOF  -> "TYPEOF" 
  | XOR  -> "XOR" 
  | EXPLICIT  -> "EXPLICIT" 
  | COMPARE  -> "COMPARE" 
  | BINARY  -> "BINARY" 
  | TEXT  -> "TEXT" 
  | BASE  -> "BASE" 
  | PRIVATEMODULE  -> "PRIVATEMODULE" 
  | EOF  -> "EOF" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | COMMA  -> "COMMA" 
  | ENDSUB  -> "ENDSUB" 
  | EOS  -> "EOS" 
  | DIGIT _ -> "DIGIT" 
  | INT _ -> "INT" 
  | TYPE _ -> "TYPE" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | CALL  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | CLOSE  -> (null : System.Object) 
  | CONST  -> (null : System.Object) 
  | DECLARE  -> (null : System.Object) 
  | DEFBOOL  -> (null : System.Object) 
  | DEFBYTE  -> (null : System.Object) 
  | DEFCUR  -> (null : System.Object) 
  | DEFDATE  -> (null : System.Object) 
  | DEFDBL  -> (null : System.Object) 
  | DEFINT  -> (null : System.Object) 
  | DEFLNG  -> (null : System.Object) 
  | DEFLNGLG  -> (null : System.Object) 
  | DEFLNGPTR  -> (null : System.Object) 
  | DEFOBJ  -> (null : System.Object) 
  | DEFSNG  -> (null : System.Object) 
  | DEFSTR  -> (null : System.Object) 
  | DEFVAR  -> (null : System.Object) 
  | DIM  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | ELSEIF  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | ENDIF  -> (null : System.Object) 
  | ENUM  -> (null : System.Object) 
  | ERASE  -> (null : System.Object) 
  | EVENT  -> (null : System.Object) 
  | EXIT  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | FRIEND  -> (null : System.Object) 
  | FUNCTION  -> (null : System.Object) 
  | GET  -> (null : System.Object) 
  | GLOBAL  -> (null : System.Object) 
  | GOSUB  -> (null : System.Object) 
  | GOTO  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | IMPLEMENTS  -> (null : System.Object) 
  | INPUT  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | LOCK  -> (null : System.Object) 
  | LOOP  -> (null : System.Object) 
  | LSET  -> (null : System.Object) 
  | NEXT  -> (null : System.Object) 
  | ON  -> (null : System.Object) 
  | OPEN  -> (null : System.Object) 
  | OPTION  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRIVATE  -> (null : System.Object) 
  | PUBLIC  -> (null : System.Object) 
  | PUT  -> (null : System.Object) 
  | RAISEEVENT  -> (null : System.Object) 
  | REDIM  -> (null : System.Object) 
  | RESUME  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | RSET  -> (null : System.Object) 
  | SEEK  -> (null : System.Object) 
  | SELECT  -> (null : System.Object) 
  | SET  -> (null : System.Object) 
  | STATIC  -> (null : System.Object) 
  | STOP  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | UNLOCK  -> (null : System.Object) 
  | WEND  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | WRITE  -> (null : System.Object) 
  | REM  -> (null : System.Object) 
  | ANY  -> (null : System.Object) 
  | AS  -> (null : System.Object) 
  | BYREF  -> (null : System.Object) 
  | BYVAL  -> (null : System.Object) 
  | EACH  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | SHARED  -> (null : System.Object) 
  | UNTIL  -> (null : System.Object) 
  | WITHEVENTS  -> (null : System.Object) 
  | OPTIONAL  -> (null : System.Object) 
  | PARAMARRAY  -> (null : System.Object) 
  | PRESERVE  -> (null : System.Object) 
  | SPC  -> (null : System.Object) 
  | TAB  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | ADDRESSOF  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | EQV  -> (null : System.Object) 
  | IMP  -> (null : System.Object) 
  | IS  -> (null : System.Object) 
  | LIKE  -> (null : System.Object) 
  | NEW  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | TYPEOF  -> (null : System.Object) 
  | XOR  -> (null : System.Object) 
  | EXPLICIT  -> (null : System.Object) 
  | COMPARE  -> (null : System.Object) 
  | BINARY  -> (null : System.Object) 
  | TEXT  -> (null : System.Object) 
  | BASE  -> (null : System.Object) 
  | PRIVATEMODULE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ENDSUB  -> (null : System.Object) 
  | EOS  -> (null : System.Object) 
  | DIGIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 4us; 65535us; 0us; 13us; 3us; 15us; 14us; 15us; 27us; 13us; 2us; 65535us; 0us; 3us; 27us; 14us; 1us; 65535us; 5us; 6us; 1us; 65535us; 18us; 19us; 1us; 65535us; 3us; 4us; 2us; 65535us; 3us; 24us; 4us; 25us; 2us; 65535us; 3us; 26us; 4us; 26us; 1us; 65535us; 34us; 35us; 2us; 65535us; 34us; 38us; 39us; 40us; 1us; 65535us; 42us; 43us; 1us; 65535us; 42us; 44us; 2us; 65535us; 34us; 41us; 39us; 41us; 2us; 65535us; 30us; 31us; 36us; 37us; 2us; 65535us; 3us; 30us; 4us; 30us; 1us; 65535us; 8us; 9us; 1us; 65535us; 10us; 11us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 10us; 13us; 15us; 17us; 19us; 22us; 25us; 27us; 30us; 32us; 34us; 37us; 40us; 43us; 45us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 7us; 2us; 2us; 16us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 6us; 2us; 7us; 17us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 2us; 18us; 20us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 24us; 1us; 24us; 1us; 26us; 1us; 27us; 1us; 29us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 76us; 78us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 112us; 114us; 116us; 118us; |]
let _fsyacc_action_rows = 58
let _fsyacc_actionTableElements = [|2us; 16389us; 18us; 8us; 45us; 5us; 0us; 49152us; 0us; 16385us; 6us; 16398us; 18us; 8us; 29us; 55us; 32us; 52us; 45us; 5us; 47us; 54us; 48us; 53us; 6us; 16386us; 29us; 55us; 32us; 52us; 47us; 54us; 48us; 53us; 58us; 16414us; 60us; 16414us; 4us; 32768us; 95us; 16us; 96us; 18us; 99us; 20us; 100us; 17us; 1us; 32768us; 106us; 7us; 0us; 16387us; 1us; 32768us; 110us; 56us; 1us; 32768us; 68us; 10us; 1us; 32768us; 109us; 57us; 1us; 32768us; 106us; 12us; 0us; 16388us; 0us; 16390us; 3us; 32768us; 18us; 8us; 45us; 5us; 105us; 28us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 2us; 32768us; 97us; 22us; 98us; 23us; 0us; 16394us; 1us; 32768us; 108us; 21us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16399us; 0us; 16400us; 1us; 32768us; 106us; 27us; 2us; 16389us; 18us; 8us; 45us; 5us; 1us; 32768us; 106us; 29us; 0us; 16401us; 1us; 16412us; 58us; 51us; 1us; 32768us; 60us; 32us; 1us; 32768us; 110us; 33us; 1us; 32768us; 102us; 34us; 2us; 16409us; 69us; 50us; 70us; 49us; 2us; 32768us; 103us; 36us; 104us; 39us; 1us; 16412us; 58us; 51us; 0us; 16402us; 0us; 16403us; 2us; 16409us; 69us; 50us; 70us; 49us; 0us; 16404us; 1us; 32768us; 110us; 42us; 1us; 16407us; 102us; 47us; 0us; 16405us; 1us; 32768us; 68us; 45us; 1us; 32768us; 109us; 46us; 0us; 16406us; 1us; 32768us; 103us; 48us; 0us; 16408us; 0us; 16410us; 0us; 16411us; 0us; 16413us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 5us; 12us; 19us; 24us; 26us; 27us; 29us; 31us; 33us; 35us; 36us; 37us; 41us; 42us; 43us; 44us; 47us; 48us; 50us; 51us; 52us; 53us; 54us; 55us; 57us; 60us; 62us; 63us; 65us; 67us; 69us; 71us; 74us; 77us; 79us; 80us; 81us; 84us; 85us; 87us; 89us; 90us; 92us; 94us; 95us; 97us; 98us; 99us; 100us; 101us; 102us; 103us; 104us; 105us; 106us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 3us; 5us; 0us; 1us; 2us; 1us; 1us; 2us; 2us; 1us; 1us; 0us; 1us; 2us; 5us; 8us; 1us; 3us; 3us; 3us; 0us; 2us; 0us; 1us; 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 8us; 9us; 10us; 10us; 11us; 12us; 13us; 13us; 14us; 14us; 14us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 17us; 18us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 16388us; 16390us; 65535us; 16391us; 16392us; 16393us; 65535us; 16394us; 65535us; 16395us; 16396us; 16397us; 16399us; 16400us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16402us; 16403us; 65535us; 16404us; 65535us; 65535us; 16405us; 65535us; 65535us; 16406us; 65535us; 16408us; 16410us; 16411us; 16413us; 16415us; 16416us; 16417us; 16418us; 16419us; 16420us; |]
let _fsyacc_reductions ()  =    [| 
# 786 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Statements.Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 795 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                   _1 
                   )
# 22 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : Statements.Prog));
# 806 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'subProcedureList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                        {  Statements = (List.rev(_1)); SubProcedures=(List.rev(_2)) } 
                   )
# 24 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'Prog));
# 818 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'optionClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                   _2 
                   )
# 27 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'Stmt));
# 829 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Id)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                              log "declaration"; Declaration(_2,_4) 
                   )
# 28 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'Stmt));
# 841 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                          []
                   )
# 31 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'StmtList));
# 851 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                [_1] 
                   )
# 32 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'StmtList));
# 862 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                               _2 :: _1 
                   )
# 33 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'StmtList));
# 874 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       Option(Explicit) 
                   )
# 36 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'optionClause));
# 884 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       Option(PrivateModule) 
                   )
# 37 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'optionClause));
# 894 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'compareType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       Option(_2) 
                   )
# 38 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'optionClause));
# 905 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       Option(Base(_2)) 
                   )
# 39 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'optionClause));
# 916 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       CompareOption(Binary) 
                   )
# 42 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'compareType));
# 926 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       CompareOption(Text) 
                   )
# 43 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'compareType));
# 936 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                          []
                   )
# 46 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'subProcedureList));
# 946 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subProcedure)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                        [_1] 
                   )
# 47 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'subProcedureList));
# 957 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subProcedureList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'subProcedure)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                         _2 :: _1 
                   )
# 48 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'subProcedureList));
# 969 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subDeclaration)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                                  log "subProc"; { Declaration = _1; Statements = _3 } 
                   )
# 51 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'subProcedure));
# 981 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'procedureScope)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'procedureStatic)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'procedureParameters)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'procedureStatic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                                                                                   { Scope=_1; Static=(option_xor _2 _8); Name=_4; Parameters = List.rev(_6) } 
                   )
# 54 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'subDeclaration));
# 996 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'positionalParam)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                                       [_1] 
                   )
# 57 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'procedureParameters));
# 1007 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'procedureParameters)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'positionalParam)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                                       _3 :: _1 
                   )
# 58 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'procedureParameters));
# 1019 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameterMechanic)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameterType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                              { Mechanic = _1; IsArray=fst(_3); IsOptional=false; Type=snd(_3); Name=_2 } 
                   )
# 61 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'positionalParam));
# 1032 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameterArrayDesignator)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                                       _1, Type(_3) 
                   )
# 63 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'parameterType));
# 1044 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       false 
                   )
# 66 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'parameterArrayDesignator));
# 1054 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       true  
                   )
# 67 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'parameterArrayDesignator));
# 1064 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       None 
                   )
# 70 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'parameterMechanic));
# 1074 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       Some(ByVal) 
                   )
# 71 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'parameterMechanic));
# 1084 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       Some(ByRef) 
                   )
# 72 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'parameterMechanic));
# 1094 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       None 
                   )
# 75 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'procedureStatic));
# 1104 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       Some(Static) 
                   )
# 76 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'procedureStatic));
# 1114 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       None 
                   )
# 79 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'procedureScope));
# 1124 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       Some(Global)
                   )
# 80 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'procedureScope));
# 1134 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       Some(Public)
                   )
# 81 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'procedureScope));
# 1144 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       Some(Private)
                   )
# 82 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'procedureScope));
# 1154 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                                                       Some(Friend)
                   )
# 83 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'procedureScope));
# 1164 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                             _1 
                   )
# 86 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'Id));
# 1175 "/home/rix/dev/vbacop/src/VbaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                               _1 
                   )
# 88 "/home/rix/dev/vbacop/src/VbaParser.fsy"
                 : 'Type));
|]
# 1187 "/home/rix/dev/vbacop/src/VbaParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 114;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Statements.Prog =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
